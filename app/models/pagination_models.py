# ==============================================================================
# pagination_models.py â€” Pagination detection and handling models
# ==============================================================================
# Purpose: Data models for pagination detection and strategy selection
# ==============================================================================

from enum import Enum
from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field
from datetime import datetime

# ==============================================================================
# Enums
# ==============================================================================

class PaginationType(str, Enum):
    """Types of pagination systems."""
    PARAMETER_BASED = "parameter_based"      # ?page=1, ?page=2
    OFFSET_BASED = "offset_based"            # ?start=0, ?start=20
    LINK_BASED = "link_based"                # Next/Previous links
    INDICATOR_BASED = "indicator_based"      # "Page 1 of 50"
    NONE = "none"                            # No pagination detected

class ContentType(str, Enum):
    """Types of content on a page."""
    ARTICLE = "article"                      # Individual article page
    LISTING = "listing"                      # List of articles/items
    SEARCH_RESULTS = "search_results"        # Search results page
    PAGINATION = "pagination"                # Pagination controls
    UNKNOWN = "unknown"                      # Unknown content type

# ==============================================================================
# Core Models
# ==============================================================================

class PaginationInfo(BaseModel):
    """Information about pagination found on a page."""
    
    # Basic detection
    has_pagination: bool = Field(default=False, description="Whether pagination was detected")
    pagination_type: PaginationType = Field(default=PaginationType.NONE, description="Type of pagination")
    
    # Page information
    current_page: Optional[int] = Field(default=None, description="Current page number")
    total_pages: Optional[int] = Field(default=None, description="Total number of pages")
    
    # Item information
    current_items: Optional[int] = Field(default=None, description="Items on current page")
    total_items: Optional[int] = Field(default=None, description="Total number of items")
    items_per_page: Optional[int] = Field(default=None, description="Items per page")
    
    # URL patterns
    base_url: str = Field(description="Base URL without pagination parameters")
    pagination_patterns: List[str] = Field(default_factory=list, description="Detected pagination patterns")
    
    # Link information
    has_next_prev_links: bool = Field(default=False, description="Has next/previous navigation")
    next_url: Optional[str] = Field(default=None, description="URL to next page")
    previous_url: Optional[str] = Field(default=None, description="URL to previous page")
    
    # Confidence
    confidence_score: float = Field(default=0.0, description="Confidence in pagination detection (0.0-1.0)")
    
    # Metadata
    detected_at: datetime = Field(default_factory=datetime.now, description="When pagination was detected")
    source_url: str = Field(description="URL where pagination was detected")

class PaginationStrategy(BaseModel):
    """Strategy for handling a specific pagination type."""
    
    strategy_type: PaginationType = Field(description="Type of pagination this strategy handles")
    base_url: str = Field(description="Base URL for pagination")
    
    # Strategy-specific parameters
    parameters: Dict[str, Any] = Field(default_factory=dict, description="Strategy-specific parameters")
    
    # Generated URLs
    page_urls: List[str] = Field(default_factory=list, description="All page URLs generated by this strategy")
    
    # Performance metrics
    total_pages_generated: int = Field(default=0, description="Total pages generated")
    generation_time_seconds: float = Field(default=0.0, description="Time taken to generate URLs")

class CrawlResult(BaseModel):
    """Result of crawling with pagination support."""
    
    # Basic information
    source_url: str = Field(description="Original URL that was crawled")
    urls_discovered: List[str] = Field(default_factory=list, description="URLs discovered during crawling")
    
    # Pagination information
    pagination_info: Optional[PaginationInfo] = Field(default=None, description="Pagination details if found")
    pagination_strategy: Optional[PaginationStrategy] = Field(default=None, description="Strategy used for pagination")
    
    # Content information
    content_type: ContentType = Field(default=ContentType.UNKNOWN, description="Type of content found")
    article_urls: List[str] = Field(default_factory=list, description="Article URLs found")
    listing_urls: List[str] = Field(default_factory=list, description="Listing page URLs found")
    
    # Performance metrics
    total_pages_crawled: int = Field(default=0, description="Total pages crawled")
    total_urls_found: int = Field(default=0, description="Total URLs discovered")
    crawling_time_seconds: float = Field(default=0.0, description="Total time spent crawling")
    
    # Error handling
    errors: List[str] = Field(default_factory=list, description="Errors encountered during crawling")
    warnings: List[str] = Field(default_factory=list, description="Warnings during crawling")

# ==============================================================================
# Configuration Models
# ==============================================================================

class PaginationSettings(BaseModel):
    """Configuration for pagination handling."""
    
    enabled: bool = Field(default=True, description="Whether pagination detection is enabled")
    max_pages: int = Field(default=1000, description="Maximum pages to crawl for any single pagination")
    rate_limit_delay: float = Field(default=2.0, description="Seconds between batch requests")
    concurrent_batches: int = Field(default=10, description="Pages per batch for concurrent crawling")
    
    # Detection settings
    detect_patterns: bool = Field(default=True, description="Auto-detect pagination patterns")
    custom_patterns: List[str] = Field(default_factory=list, description="Custom pagination patterns")
    
    # Content extraction
    extract_articles: bool = Field(default=True, description="Extract article URLs from pages")
    follow_redirects: bool = Field(default=True, description="Follow redirects during crawling")
    
    # Performance
    timeout_seconds: int = Field(default=30, description="Timeout for individual page requests")
    max_retries: int = Field(default=3, description="Maximum retries for failed requests")

# ==============================================================================
# Utility Models
# ==============================================================================

class PaginationPattern(BaseModel):
    """A detected pagination pattern."""
    
    pattern_type: str = Field(description="Type of pattern (regex, xpath, etc.)")
    pattern: str = Field(description="The actual pattern string")
    confidence: float = Field(description="Confidence score for this pattern")
    examples: List[str] = Field(default_factory=list, description="Example matches found")

class ContentIndicators(BaseModel):
    """Indicators that help classify content type."""
    
    # Article indicators
    has_title: bool = Field(default=False, description="Has article title")
    has_author: bool = Field(default=False, description="Has author information")
    has_publish_date: bool = Field(default=False, description="Has publication date")
    has_content_body: bool = Field(default=False, description="Has main content body")
    
    # Listing indicators
    has_item_list: bool = Field(default=False, description="Has list of items")
    has_pagination_controls: bool = Field(default=False, description="Has pagination controls")
    has_search_filters: bool = Field(default=False, description="Has search/filter options")
    
    # Search indicators
    has_search_box: bool = Field(default=False, description="Has search input")
    has_result_count: bool = Field(default=False, description="Shows result count")
    has_sort_options: bool = Field(default=False, description="Has sorting options")
